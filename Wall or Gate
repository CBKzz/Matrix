You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
  
  My code:(I think it's right..but not good, because I get time limit exceed)
  Actually,no. I made a huge mistake....this is DFS!!!!
public class Solution {
    Set<String> visited =new HashSet<>();
    public void wallsAndGates(int[][] rooms) {
        for(int i=0;i<rooms.length;i++){
            for (int j=0;j<rooms[0].length;j++){
                if(rooms[i][j]==0) {visited.clear();BFS(rooms, i, j,0);}
            }
        }
    }
    
    public void BFS(int[][] rooms, int i, int j, int level){
        visited.add(i+""+j);
        if(i-1>=0&&visited.add(i-1+""+j)) {
            if(rooms[i-1][j]!=-1) {rooms[i-1][j]=rooms[i-1][j]==Integer.MIN_VALUE?level+1:Math.min(rooms[i-1][j],level+1);
            BFS(rooms,i-1,j,level+1);}
        }
        if(i+1<rooms.length&&visited.add(i+1+""+j)){
            if(rooms[i+1][j]!=-1) {rooms[i+1][j]=rooms[i+1][j]==Integer.MIN_VALUE?level+1:Math.min(rooms[i+1][j],level+1);
            BFS(rooms,i+1,j,level+1);}
        }
        if(j-1>=0&&visited.add(i+""+(j-1))){
            if(rooms[i][j-1]!=-1) {rooms[i][j-1]=rooms[i][j-1]==Integer.MIN_VALUE?level+1:Math.min(rooms[i][j-1],level+1);
            BFS(rooms,i,j-1,level+1);}
        }
        if(j+1<rooms[0].length&&visited.add(i+""+(j+1))){
            if(rooms[i][j+1]!=-1) {rooms[i][j+1]=rooms[i][j+1]==Integer.MIN_VALUE?level+1:Math.min(rooms[i][j+1],level+1);
            BFS(rooms,i,j+1,level+1);}
        }
        
    }
    
    
}
